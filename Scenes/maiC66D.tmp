[gd_scene load_steps=12 format=3 uid="uid://570hps3njcqy"]

[ext_resource type="Theme" uid="uid://b4h3syf1usohg" path="res://theme.tres" id="1_hvc3h"]
[ext_resource type="Texture2D" uid="uid://csvsy3b0r3bvc" path="res://Graphics/Bonuses-bg@2x.png" id="1_i0gax"]
[ext_resource type="PackedScene" uid="uid://bom0j7y5ttd2h" path="res://Scenes/FieldScene.tscn" id="2_i6nkf"]
[ext_resource type="Texture2D" uid="uid://buqobt8law3no" path="res://Graphics/Upgrades-title@2x.png" id="2_mgeo0"]
[ext_resource type="Texture2D" uid="uid://sdkpqv0k4px6" path="res://Graphics/Buildings-title@2x.png" id="3_y32we"]
[ext_resource type="PackedScene" uid="uid://xmmt1r1up00r" path="res://Scenes/timeline.tscn" id="4_bhfg0"]
[ext_resource type="FontFile" uid="uid://tb7p0lrnu6ob" path="res://Inter-SemiBold.ttf" id="5_yfomq"]
[ext_resource type="AudioStream" uid="uid://bmi18jpdsojlg" path="res://Sounds/bg.mp3" id="9_em6ej"]
[ext_resource type="Texture2D" uid="uid://dha1geeq70ta4" path="res://Graphics/year-wreath@2x.png" id="10_8h8rh"]
[ext_resource type="AudioStream" uid="uid://bo0jr3h20u2ge" path="res://Sounds/vshik.mp3" id="10_qqqaa"]

[sub_resource type="GDScript" id="GDScript_s2meh"]
script/source = "extends Node2D

@onready var game = get_node(\"/root/GameState\")
var bonuses : Dictionary = {}
var buildingsData = preload(\"res://Scripts/buildings.tres\")
@onready var bonusprototype = {\"buildings\": preload(\"res://Scenes/buildings.tscn\"), \"bonuses\": preload(\"res://Scenes/bonusess.tscn\")}

# Called when the node enters the scene tree for the first time.
func _ready():
	# update label
	$\"/root/Main/yearLabel\".text = str(\"Year \", game.wave+1)
	drawBuildings()
	load_game()
	pass

func drawBuildings():
	var buildingsData = buildingsData.data
	# key for rendering order  
	var bonusType = [\"buildings\", \"bonuses\"]
	# Instance of the bonus scene and feed it with data from array / node is the bonus button
	var node
	
	for object in bonusType:
		var currentObject = buildingsData[object]
		print_debug(\"keys on current obj\", currentObject[0].Name)
	
		var range_end = currentObject.size()
		for i in range(range_end):
			var b = currentObject[i]
			node = bonusprototype[object].instantiate()
			# parameters for bonusobject
			node.bonusname = b[\"Name\"]
			node.bonusdesc = b[\"Desc\"]
			node.price = b[\"Price\"]
			node.baseprice = node.price
			node.amount = 0
			# assign container
			if object == \"buildings\":
				$BuildingsContainer.add_child(node)
			if object == \"bonuses\":
				$BonusContainer.add_child(node)
			node.connect(\"pressed\", bonuspurchase.bind(node))
			bonuses[node.bonusname] = node
			
func drawBonus():
	var allowedBonuses = bonusesAllowed()
	for bon in allowedBonuses:
		if bonuses[bon]:
			pass
			
func bonusesAllowed() -> Array:
	match game.wave: 
		0:
			return [\"Better tools\", \"Nuts and bolts\"]
		1:
			return [\"Fresh Bread\", \"Solar Panels\"]
	return []
	pass
	
	
func hideifBonus(bonusname):
	var buildingsData = buildingsData.data
	for i in buildingsData[\"bonuses\"]:
		if i.Name == bonusname:
			bonuses[bonusname].visible = false
	pass

func _input(event):
	var fieldClick = $FieldArea.get_node(\"Field\")
	if event is InputEventMouseButton:
		var mouse_position = event.position
		if event.button_index == 1:
			if fieldClick.get_rect().has_point(fieldClick.to_local(mouse_position)):
				if event.pressed:
					#Animation on press
					fieldClick.pressed()
					manualHarvesting()
					$vshik.play()
					fieldClick.spawnParticle(mouse_position)
				elif event.is_released:
					#Animation on release
					fieldClick.released()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	# AutoHarvester upd value and label
	var wheatPerSec = autoHarvesting()
	game.wheat += wheatPerSec*delta
	$WheatValue.text = thousandsFrom(game.wheat) + \" wheat\"
	$HarvestSpeed.text = str(decimalsFrom(wheatPerSec), \" / sec\")
	pass


func manualHarvesting():
	var baseClick = 1.0
	game.wheat += baseClick
	print(\"Manually Harvested\")


func autoHarvesting() -> float:
	# buildings
	var fieldworker = bonuses[\"Field Worker\"].amount
	var harvester = bonuses[\"Harvester\"].amount
	var heavyharvester = bonuses[\"Heavy Harvester\"].amount
	var succubus = bonuses[\"Succubus\"].amount
	# Bonuses
	var bread = bonuses[\"Fresh Bread\"].amount
	var solarPanels = bonuses[\"Solar Panels\"].amount
	var betterTools = bonuses[\"Better tools\"].amount
	#var nutsNBolts = bonuses[\"Nuts and bolts\"].amount
	# combined wheat per second 1.05 = 5% adding bonus: *pow(1.05,bettertools)
	var breadEffect = pow(2, bread)
	var wheatPerSec = (fieldworker*0.5)*breadEffect+harvester*1+heavyharvester*1.5+succubus*2
	return wheatPerSec


# Oleh's magic
func thousandsFrom(val) -> String:
	var v := int(val)
	var p :Array[String] = []
	while v >= 1000:
		p.append(\"%03d\" % (v % 1000))
		v /= 1000
	p.append(str(v))
	p.reverse()
	return \",\".join(p)


#Format string \"1.25 wheat / sec\"
func decimalsFrom(number) -> String:
	var format_string = \"%*.*f\"
	var number_formatted = format_string % [0, 2, number]
	return number_formatted


func bonuspurchase(node):
	# AutoHarvester purchasing logic
	# Check if player have enough resource to buy a harvester 
	if game.wheat >= node.price:
		#take resources give harvester
		game.wheat -= node.price
		node.amount += 1
		# Setting price
		hideifBonus(node.bonusname)
		node.price = calcBonusPrice(node)
		print(\"Bonus added: \", node.bonusname, \" \", node.amount)
	pass
	

func calcBonusPrice(node) -> int:
	return node.baseprice*pow(1.15, node.amount)

func saveGame():
	var save_game = FileAccess.open(\"user://savegame.save\", FileAccess.WRITE)
	var saveNode = save()
	var json_string = JSON.stringify(saveNode)
	save_game.store_line(json_string)
	print_debug(\"Saved status\", saveNode)
	pass

func save() -> Dictionary:
	var save_dict = {
		\"operations\": {
			\"wheatValue\" : game.wheat,
			\"wave\" : game.wave,
			},
		\"bonuses\": {},
	}
	for i in bonuses.keys():
		save_dict.bonuses[i] = {
			\"amount\" : bonuses[i].amount,
			}
	return save_dict


func load_game():
	if not FileAccess.file_exists(\"user://savegame.save\"):
		return # Error! We don't have a save to load.

	var save_game = FileAccess.open(\"user://savegame.save\", FileAccess.READ)
	while save_game.get_position() < save_game.get_length():
		var json_string = save_game.get_line()

		# Creates the helper class to interact with JSON
		var json = JSON.new()

		# Check if there is any error while parsing the JSON string, skip in case of failure
		var parse_result = json.parse(json_string)
		if not parse_result == OK:
			print(\"JSON Parse Error: \", json.get_error_message(), \" in \", json_string, \" at line \", json.get_error_line())
			continue

		# Get the data from the JSON object
		var saved_data = json.get_data()
		if saved_data:
			# Operations
			game.wheat = saved_data.operations[\"wheatValue\"]
			game.wave = saved_data.operations[\"wave\"]
			$yearLabel.text = str(\"Year \", game.wave+1)
			
			# Reset quota, based on wave
			$\"/root/Main/Timeline/\".demonQuota = $\"/root/Main/Timeline/\".calcQuota()
			$\"/root/Main/Timeline/quotaValueDisplay\".text = \"Demons quota: %d\" % $\"/root/Main/Timeline/\".demonQuota
			
			# Bonuses and buildings
			for b in saved_data.bonuses.keys():
				var bload = saved_data.bonuses[b]
				bonuses[b].amount = saved_data.bonuses[b].amount
				bonuses[b].price = calcBonusPrice(bonuses[b])
				print_debug(\"3arpy3ka 6oHycoB \", b, \" -> \", saved_data.bonuses[b])
"

[node name="Main" type="Node2D" groups=["Persist"]]
script = SubResource("GDScript_s2meh")

[node name="Bg" type="Sprite2D" parent="."]
position = Vector2(1736, 136)
scale = Vector2(0.527065, 0.527065)
texture = ExtResource("1_i0gax")
offset = Vector2(-576.779, 774.098)

[node name="Upgrades-title_2x" type="Sprite2D" parent="Bg"]
position = Vector2(-576.779, 1011.26)
texture = ExtResource("2_mgeo0")

[node name="Buildings-title_2x" type="Sprite2D" parent="Bg"]
position = Vector2(-576.779, 2.47955e-05)
texture = ExtResource("3_y32we")

[node name="BuildingsContainer" type="VBoxContainer" parent="."]
offset_left = 1160.0
offset_top = 192.0
offset_right = 1712.0
offset_bottom = 592.0
theme_override_constants/separation = 6

[node name="BonusContainer" type="HBoxContainer" parent="."]
offset_left = 1160.0
offset_top = 728.0
offset_right = 1712.0
offset_bottom = 898.0
theme_override_constants/separation = 6

[node name="WheatValue" type="Label" parent="."]
offset_left = 52.0
offset_top = 44.0
offset_right = 87.0
offset_bottom = 78.0
theme = ExtResource("1_hvc3h")
theme_override_fonts/font = ExtResource("5_yfomq")
theme_override_font_sizes/font_size = 32
text = "0"
metadata/_edit_use_anchors_ = true

[node name="HarvestSpeed" type="Label" parent="."]
offset_left = 52.0
offset_top = 96.0
offset_right = 122.0
offset_bottom = 122.0
size_flags_vertical = 8
theme = ExtResource("1_hvc3h")
theme_override_colors/font_color = Color(0.0745098, 0.0745098, 0.0745098, 1)
theme_override_font_sizes/font_size = 24
text = "1.2 / sec
"
metadata/_edit_use_anchors_ = true

[node name="FieldArea" parent="." instance=ExtResource("2_i6nkf")]
position = Vector2(107, 247)

[node name="Timeline" parent="." instance=ExtResource("4_bhfg0")]
position = Vector2(80, 848)

[node name="BgMusic" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("9_em6ej")
volume_db = 10.0

[node name="vshik" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("10_qqqaa")

[node name="yearLabel" type="Label" parent="."]
offset_left = 136.0
offset_top = 1010.0
offset_right = 203.0
offset_bottom = 1033.0
theme = ExtResource("1_hvc3h")
text = "Year #"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Year-wreath_2x" type="Sprite2D" parent="yearLabel"]
position = Vector2(91.75, 10)
scale = Vector2(0.5, 0.5)
texture = ExtResource("10_8h8rh")

[node name="Year-wreath_2x2" type="Sprite2D" parent="yearLabel"]
position = Vector2(-26.25, 10)
rotation = -3.14159
scale = Vector2(0.5, 0.5)
texture = ExtResource("10_8h8rh")
